@page "/Menu"
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using SharedLibrary.Enums
@using BlazorDateRangePicker
@using ScoutCookBook.Classes
@using ScoutCookBook.Components
@inject NavigationManager NavManager
@inject IToastService ToastService
@inject IModalService Modal
@inject IRecipeData _db


@if (AllRecipes is null)
{
    <p><em>Loading...</em></p>
}
else if (!StepOneFinnished)
{
    <h1>Create Menu 1/3</h1>
    <hr>
    <EditForm Model="StepOneForm" OnValidSubmit=SubmitStepOne>
    <ValidationSummary />
    <DataAnnotationsValidator />

    <div class="row">
    <div class="col-6">
    
    <label>Choose date range
    <DateRangePicker @bind-StartDate="StepOneForm.StartDate" @bind-EndDate="StepOneForm.EndDate" Inline="true" AutoApply="true" ShowOnlyOneCalendar="true" >
        <PickerTemplate Context="DP">
        @* Empty input template *@
        </PickerTemplate>
    </DateRangePicker>
    </label>
    <br><br><br>
    <label>Starting meal<br>
    <RadzenSelectBar @bind-Value="StepOneForm.StartMeal" >
        <Items>
            <RadzenSelectBarItem Text="Breakfast" Value="@("Breakfast")" />
            <RadzenSelectBarItem Text="Lunch" Value="@("Lunch")" />
            <RadzenSelectBarItem Text="Dinner" Value="@("Dinner")" />
        </Items>
    </RadzenSelectBar>
    </label>
    <br>
    <label>Ending meal<br>
    <RadzenSelectBar @bind-Value="StepOneForm.EndMeal" >
        <Items>
            <RadzenSelectBarItem Text="Breakfast" Value="@("Breakfast")" />
            <RadzenSelectBarItem Text="Lunch" Value="@("Lunch")" />
            <RadzenSelectBarItem Text="Dinner" Value="@("Dinner")" />
        </Items>
    </RadzenSelectBar>
    </label>
    </div>

    <div class="col">
    <label> Default number of portions
    @foreach(var portion in StepOneForm.Portions)
    {                      
        <div class="input-group mb-2">
            <div class="input-group-prepend">
                <span class="input-group-text" style="min-width: 7em;">@portion.Person.Name</span>
            </div>
        <InputNumber class="form-control" @bind-Value="@portion.Count" />
        </div>
    }
    </label>
    </div>

    </div> <!-- row -->
    <hr>
    <button type="submit" class="btn btn-primary">Next</button>
    <br>
    </EditForm>
}
else if (!StepSecondFinnished)
{
    <h1>Create Menu 2/3</h1>
    <hr>
    @foreach (var menuDay in Menu)
    {
        <div class="row">
            <div class="col-12">
                <h3>@menuDay.Date.DayOfWeek.ToString() @menuDay.Date.ToString("d. MMMM")</h3>
            </div>
            @if(menuDay.Slots.All(s => s.Key != "Breakfast")) { <div class="col-4"></div> 
            @if(menuDay.Slots.All(s => s.Key != "Lunch")) { <div class="col-4"></div> }}
            @foreach(var (slotName, meals) in menuDay.Slots) 
            {
                <div class="col-4">
                    <b>@slotName</b>
                    @foreach (var meal in meals)
                    {
                        <MenuMealEdit Meal=meal  Recipes=AllRecipes />
                    }
                    <button type="button"  @onclick=@(()=> AddMeal(meals) )>+</button>
                    <button type="button"  @onclick=@(()=> Reset(meals) )>clear</button> 
                    <br><br>
                </div>
            }
        </div>
        <hr>
    }   
    <button type="button" class="btn btn-danger" @onclick=BackToStepOne >Back (date selection)</button>
    <button type="button" class="btn btn-primary" @onclick=@(()=> StepSecondFinnished = true )>Next (summary)</button>
    <br> 
} 
else
{
    <h1>Create Menu 3/3</h1>
    <hr>
    <MenuSummary Menu=Menu />
    <br>
    <button type="button" class="btn btn-primary" @onclick=@(()=> StepSecondFinnished = false )>Back (meal selection)</button>
    <br>
}

@code {
    private bool StepOneFinnished = false;
    private bool StepSecondFinnished = false;
    private MenuStepOneFormModel StepOneForm = new MenuStepOneFormModel();
    private List<RecipeModel> AllRecipes;
    private List<PersonModel> People;
    private List<MenuDay> Menu = new List<MenuDay>();
    protected override async Task OnInitializedAsync()
    {
        AllRecipes = await _db.GetRecipes();
        People = await _db.GetPeople();
        foreach (var person in People)
        {
            StepOneForm.Portions.Add(new Portion(){ Person = person, Count = 0});
        }
    }

    private void SubmitStepOne()
    {
        if(StepOneForm.StartDate == null || StepOneForm.EndDate == null) return;
        var numOfDays = (StepOneForm.EndDate - StepOneForm.StartDate).Value.Days;
        for(int i = 0; i <= numOfDays; i++)
        {
            var menuDay = new MenuDay() { Date = StepOneForm.StartDate.Value.AddDays(i) };
            if(i != 0 || StepOneForm.StartMeal == "Breakfast")
            {
                menuDay.Slots.Add(new KeyValuePair<string, List<Meal>>(
                    "Breakfast", 
                    AddMeal(new List<Meal>())
                ));
            }
            if( i == 0 && StepOneForm.StartMeal != "Dinner" || 
                i == numOfDays && StepOneForm.EndMeal != "Breakfast" || 
                i != 0 && i != numOfDays)
            {
                menuDay.Slots.Add(new KeyValuePair<string, List<Meal>>(
                    "Lunch", 
                    AddMeal(new List<Meal>())
                ));
            }
            if(i != numOfDays || StepOneForm.EndMeal == "Dinner")
            {
                menuDay.Slots.Add(new KeyValuePair<string, List<Meal>>(
                    "Dinner", 
                    AddMeal(new List<Meal>())
                ));
            }

            Menu.Add(menuDay);
        }
        StepOneFinnished = true;
    }
    private async Task BackToStepOne() 
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(ConfirmModal.Message), "Current meal selection will be lost");
        modalParameters.Add(nameof(ConfirmModal.ConfirmButtonText), "Go back");
        var modalOptions = new ModalOptions() { HideCloseButton = true};

        var result = await Modal.Show<ConfirmModal>("Are you sure?", modalParameters, modalOptions).Result;

        if (!result.Cancelled)
        {
            Menu.Clear();
            StepOneFinnished = false;
        } 
        
    }

    private void Reset(List<Meal> meals)
    {
        meals.Clear();
        AddMeal(meals);
    }

    private List<Meal> AddMeal(List<Meal> meals)
    {
        meals.Add(new Meal() {Portions = StepOneForm.Portions});
        return meals;
    }
}
    
