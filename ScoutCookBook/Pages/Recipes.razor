@page "/Recipes"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using System.Globalization

@inject NavigationManager NavManager
@inject IToastService ToastService
@inject IModalService Modal
@inject ICookBookData _db

<h1>Recipes</h1>
<hr>
<button type="button" class="btn btn-primary" @onclick="@(() => NavManager.NavigateTo("/RecipeEditor"))">Create new</button>
<br>
<br>
@if (AllRecipes is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead> 
        <tbody>
            @foreach (var recipe in AllRecipes)
            {
                <tr>
                    <td>@recipe.Name</td>
                    <td>@recipe.Type</td>
                    <td><a class="btn" href="/RecipeEditor/@recipe.Id"><span class="oi oi-pencil"></span></a></td>
                    <td><button type="button" @onclick="@(() => DeleteRecipe(recipe))" class="btn"><span class="oi oi-x"></span></button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    readonly StringComparer comp = StringComparer.Create(CultureInfo.CreateSpecificCulture("cs-CZ"), false); //true/false - whether comparison should be case-sensitive
    private List<RecipeModel> AllRecipes;

    protected override async Task OnInitializedAsync()
    {
        AllRecipes = (await _db.GetRecipes()).OrderBy(i => i.Name, comp).ThenBy(i => i.Id).ToList();
    }
   
    private async Task DeleteRecipe(RecipeModel recipe)
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(ConfirmModal.Message), "Recipe will be permanently deleted");
        modalParameters.Add(nameof(ConfirmModal.ConfirmButtonText), "Delete");
        var modalOptions = new ModalOptions() { HideCloseButton = true};

        var result = await Modal.Show<ConfirmModal>("Are you sure?", modalParameters, modalOptions).Result;

        if (!result.Cancelled)
        {
            await _db.DeleteRecipe(recipe.Id);
            AllRecipes.Remove(recipe);
            ToastService.ShowSuccess($"{recipe.Name} Deleted");
        }  
        
    }

}
