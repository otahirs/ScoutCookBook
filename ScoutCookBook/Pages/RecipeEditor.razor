@page "/RecipeEditor"
@page "/RecipeEditor/{recipeid:int}"

@using SharedLibrary.Enums
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using ScoutCookBook.Classes

@inject NavigationManager NavManager
@inject IToastService ToastService
@inject IRecipeData _db

@if (Recipe is null)
{
    <p><em>Loading...</em></p>
}
else
{
    var header = "";
    header = RecipeId == null ? "Create recipe" : "Edit recipe";

    <h1>@header</h1>    
    <EditForm Model="@Recipe" OnValidSubmit="@InsertRecipe">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label>
            Recipe name:
            <InputText  @bind-Value="@Recipe.Name" />
        </label><br>
        <label>
            How many people are the ingredients for:
            <InputNumber @bind-Value="@Recipe.NumberOfPortions" />
        </label><br>
        
        <label>
            Meal type:
            <InputSelect @bind-Value="@Recipe.Type"><br>
                @foreach (var type in Enum.GetValues(typeof(DishType)))
                { 
                    <option value="@type">@type.ToString()</option>
                }
            </InputSelect>
        </label>
        <hr>
        <label>Ingredients:</label>
            @foreach (var ingredient in Recipe.Ingredients)
            { 
                @* <select @onchange=@( e => IngredientUpdated(e, ingredient))>
                    <option hidden disabled>-- Select --</option>
                    @foreach (var ing in AllIngredients)
                    {
                        <option value="@ing.Id.ToString()" selected="@(ingredient.Id == ing.Id)">@ing.Name</option>
                    }
                </select>  *@
                <br>
                <RadzenDropDown 
                    @bind-Value="ingredient.Id"
                    Data="@AllIngredients"
                    TextProperty="Name" 
                    ValueProperty="Id" 
                    Change="@( id => IngredientUpdated(id, ingredient))" 
                    TValue="int" 
                    AllowFiltering="true" 
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
                    Placeholder="Select..." 
                    FilterDelay="100"
                    AllowClear="true"
                    />
                <RadzenNumeric @bind-Value="@ingredient.Amount" Style="top: -14px;position: relative; width:6em;" />
                
                @if (ingredient.Id != 0) {
                    <span style="top: -12px;position: relative;"> @ingredient.Unit.ToString()</span>
                }
            }
        <br>
        
        
        @if(CreateIngredientIsActive)
        {
            <br>
            <EditForm Context="InsertNewIngredient" Model="@newIngredient" OnValidSubmit="@SaveIngredient">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label>
                Name:
                <InputText @bind-Value="@newIngredient.Name" />
            </label><br>
            <label>
                Category:
                <InputSelect @bind-Value=newIngredient.Category><br>
                    @foreach (var category in Enum.GetValues(typeof(IngredientCategory)))
                    { 
                        <option value="@category">@category.ToString()</option>
                    }
                </InputSelect>
            </label><br>
            <label>
                Unit:
                <InputSelect @bind-Value=newIngredient.Unit><br>
                    @foreach (var unit in Enum.GetValues(typeof(IngredientUnit)))
                    { 
                        <option value="@unit">@unit.ToString()</option>
                    }
                </InputSelect>
            </label><br>

            <button type="submit" class="btn-primary">Create and Add</button>
            <button type="button" class="btn-secondary" @onclick="@(() => CreateIngredientIsActive = false )">Cancel</button>
            </EditForm>
            <br>
        }
        else 
        {
            <button type="button" class="btn-primary" @onclick="AddIngredient">Add</button>
            <button type="button" class="btn-secondary" @onclick="@(() => CreateIngredientIsActive = true )">Create new</button>
        }
        <hr>
        <label style="display:block;">
            Popis přípravy:
            <textarea @bind-value="Recipe.Directions" @bind-value:event="oninput" rows="@Recipe.DirectionsRowCount" style="width:50%;display:block;resize:horizontal;overflow:hidden;" />
        </label>
        <hr>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>

}

@code {
   
    [Parameter]
    public int? RecipeId { get; set; }

    private bool CreateIngredientIsActive = false;
    private Recipe Recipe;
    private List<IngredientModel> AllIngredients;

    private Ingredient newIngredient = new Ingredient();
    protected override async Task OnInitializedAsync()
    {
        AllIngredients = await _db.GetIngredients();
        Recipe = new Recipe();
        if (RecipeId != null) 
        {
            await Recipe.LoadAsync((int)RecipeId);
        }
        
    }
    private async Task InsertRecipe()
    {
        var recipeToDb = Recipe.GetRecipeModel();

        if (RecipeId == null)
        {
            Recipe.Id = await _db.InsertRecipe(recipeToDb);
        }
        else
        {
            await _db.UpdateRecipe(recipeToDb);
            await _db.DeleteAllIngredientsInRecipe(Recipe.Id);
        }
             
        foreach (var ingredient in Recipe.Ingredients)
        {
            if (ingredient.Amount == 0) continue;
            if (ingredient.Id == 0) continue;

            var ingToDb = new IngredientInRecipeModel 
            {
                Id = ingredient.Id,
                RecipeId = Recipe.Id,
                Amount = ingredient.Amount
            };
            await _db.InsertIngredientInRecipe(ingToDb);
        }
        ToastService.ShowSuccess($"Recipe {(RecipeId == null ? "created" : "updated")}");
        if (RecipeId == null) NavManager.NavigateTo($"/RecipeEditor/{Recipe.Id}");
    }

    private void AddIngredient() {
        Recipe.Ingredients.Add(new Ingredient());
    }

    private async Task SaveIngredient()
    {
            var ingredientToDb = newIngredient.GetIngredientModel();

            ingredientToDb.Id = await _db.InsertIngredient(ingredientToDb);
            AllIngredients.Add(ingredientToDb);

            newIngredient.Id = ingredientToDb.Id;
            Recipe.Ingredients.Add(newIngredient);

            newIngredient = new Ingredient(); 
            CreateIngredientIsActive = false;   

            ToastService.ShowSuccess($"{ingredientToDb.Name} Added");
    }

    private void IngredientUpdated(object id, Ingredient ingredient)
    {
        if ((int)id == 0) return;
        var selected = AllIngredients.First(i => i.Id == (int)id);
        ingredient.Id = selected.Id;
        ingredient.Name = selected.Name;
        ingredient.Unit = Enum.Parse<IngredientUnit>(selected.Unit);
    }
}
