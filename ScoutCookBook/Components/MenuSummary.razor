@using SharedLibrary.Enums
@using System.Linq
@using ScoutCookBook.Classes
@inject IJSRuntime js

<div class="row">
<div class="col-8">
    <div class="card">
    <div class="card-body">
    <h3 class="card-title">Menu</h3>
    @foreach(var menuDay in Menu) {
        <h5>@menuDay.Date.DayOfWeek.ToString() @menuDay.Date.ToString("d. MMMM")</h5>
        @foreach(var (slotName, meals) in menuDay.Slots) {
            <div class="row">
                <div class="col-2">
                    <b>@slotName</b>
                </div>
                <div class="col">
                @foreach (var meal in meals)
                {
                    @meal.Recipe.Name<br>
                }
                </div>
            </div>
        }
        <br>
    }
    <button @onclick=DownloadMenu>Download</button>
    </div>
    </div>
</div>
<div class="col">
@if(Menu != null)
{
    <div class="card">
    <div class="card-body">
        <h3 class="card-title">Shopping List</h3>
        <p class="card-text">  
        @foreach(var (category, ingredientAmounts) in ShoppingList)
        {
            @category.ToString()
            <ul>
                @foreach (var ia in ingredientAmounts)
                {
                    var last = ia.Recipes.Last();
                    <li><b>@ia.Ingredient.Name: @Ingredient.UnitAmountFormated(ia.TotalAmount, ia.Ingredient.Unit)</b>
                        <em>(
                        @foreach (var recipe in ia.Recipes)
                        {
                            @recipe.Name
                            if(recipe != last) @(", ")
                        }
                        )</em>
                    </li>
                }
            </ul>
        }
        </p>
        <button @onclick=DownloadShoppingList>Download</button>
    </div>
    </div>

    <br>
    <div class="card">
    <div class="card-body">
        <h3 class="card-title">Recipes</h3>
        <button @onclick=DownloadRecipes>Download</button>
    </div>
    </div>
}
</div>
</div>



@code {
    [Parameter]
    public List<MenuDay> Menu { get; set; }

    private Dictionary<IngredientCategory, List<IngredientAmount>> ShoppingList
    {
        get 
        {
            return this.Menu
                .SelectMany(md => md.IngredientsAmount)
                .ToLookup(ia => ia.Ingredient.Id)
                .Select(ia => ia.Aggregate((ia1, ia2) => new IngredientAmount
                {
                    Ingredient = ia1.Ingredient,
                    TotalAmount = ia1.TotalAmount + ia2.TotalAmount,
                    Recipes = ia1.Recipes.Concat(ia2.Recipes).ToList()
                }))
                .GroupBy(ia => ia.Ingredient.Category)
                .ToDictionary(g => g.Key, g => g.ToList());
        }
    }

    private async Task DownloadShoppingList() {
        var sb = new System.Text.StringBuilder();
        sb.AppendLine("Shopping list");
        foreach(var (category, ingredientAmounts) in ShoppingList)
        {
            sb.AppendLine(category.ToString());
            foreach (var ia in ingredientAmounts)
            {
                var last = ia.Recipes.Last();
                sb.Append($" - {ia.Ingredient.Name}: {Ingredient.UnitAmountFormated(ia.TotalAmount, ia.Ingredient.Unit) } (");
                foreach (var recipe in ia.Recipes)
                {
                    sb.Append(recipe.Name);
                    if(recipe != last) sb.Append(", ");
                }
                sb.AppendLine(")");
            }
        }
        var text = sb.ToString();
        var fileName = "ShoppingList.txt";
        var bytes = System.Text.Encoding.UTF8.GetBytes(text);
        await FileUtil.SaveAs(js, fileName, bytes);
    }

    private async Task DownloadMenu() {
        var sb = new System.Text.StringBuilder();
        sb.AppendLine("Menu");

        foreach(var menuDay in this.Menu) 
        {
            sb.AppendLine("-------------------------");
            sb.AppendLine();
            sb.AppendLine(menuDay.ToString());
        }
        var text = sb.ToString();
        var fileName = "Menu.txt";
        var bytes = System.Text.Encoding.UTF8.GetBytes(text);
        await FileUtil.SaveAs(js, fileName, bytes);
    }

    private async Task DownloadRecipes() {
        var sb = new System.Text.StringBuilder();

        foreach(var menuDay in this.Menu) {
            foreach(var (_,meals) in menuDay.Slots) {
                foreach (var meal in meals)
                {
                    sb.AppendLine("-------------------------");
                    sb.AppendLine();
                    sb.AppendLine(meal.ToString());
                }
            }
        }

        var text = sb.ToString();
        var fileName = "Recipes.txt";
        var bytes = System.Text.Encoding.UTF8.GetBytes(text);
        await FileUtil.SaveAs(js, fileName, bytes);
    }
}